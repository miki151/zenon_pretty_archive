
export import "std/expected.znn";
export import "std/io.znn";
import "std/char.znn";
export import "std/vector.znn";
export import "std/enum_set.znn";
export import "std/enum_map.znn";
export import "std/hash_map.znn";
export import "std/enum.znn";
export import "std/range.znn";
export import "std/pair.znn";
import "pretty_preprocess.znn";
export import "std/box.znn";
export import "std/any.znn";

export struct input_stream_position {
  int line;
  int column;
};

export struct input_stream {
  vector<vector<input_stream_position>> positions;
  string_iterator index;
  string_iterator buffer_end;
  vector<concept_mapping_info> concept_mapping;
};

using read_function_type = invoke<expected<box<any>, string>, input_stream mutable*>;

export struct concept_mapping_info {
  string concept_type_name;
  string mapped_type_name;
  box<read_function_type> read_function;
  bool pop_token;
};

export concept <T> read_data_overload {
  T!string read_data(input_stream mutable*, pretty_dummy_struct<T>);
};

export template <C, T> requires is_concept<C>, read_data_overload<T>
void add_concept_mapping(input_stream mutable* stream) {
  add_concept_mapping<C, T>(stream, to_string(T), false);
}

export template <C, T> requires is_concept<C>, read_data_overload<T>
void add_concept_mapping(input_stream mutable* stream, string mapped_name) {
  add_concept_mapping<C, T>(stream, mapped_name, false);
}

export template <C, T> requires is_concept<C>, read_data_overload<T>
void add_concept_mapping(input_stream mutable* stream, string mapped_name, bool pop_token) {
  stream^.concept_mapping.push_back(concept_mapping_info(
    to_string(C),
    mapped_name,
    [](input_stream mutable* stream) -> box<any>!string {
      return (try stream^.read_data<T>()).box_as<C>().box_as<any>();
    }.box_as<read_function_type>(),
    pop_token
  ));
}

export template <C> requires is_concept<C>
box<C>!string read_data(input_stream mutable* stream, pretty_dummy_struct<box<C>>) {
  const last_index = stream^.index;
  const mapped_name = stream^.read_string();
  for (mapping : stream^.concept_mapping)
    if (mapping^.concept_type_name == to_string(C) && mapping^.mapped_type_name == mapped_name) {
      if (mapping^.pop_token)
        stream^.index = last_index;
      const box<any> a = try mapping^.read_function^(stream);
      return *move(a).cast_to<box<C>>();
    }
  stream^.index = last_index;
  return stream^.get_error("Not an {to_string(C)} type: \"{mapped_name}\"");
}

export input_stream!string create_input_stream(string s) {
  const positions = try preprocess(s);
  const content = positions.content;
  //printf("After prep:\n{content}\n===\n");
  return input_stream(move(positions).positions, content.begin(), content.end(), vector<concept_mapping_info>());
}

export template <T>
struct pretty_dummy_struct {};

export enum bracket_to_parse {
  OPEN,
  COMMA,
  CLOSE
};

export template <T>
bool round_brackets(pretty_dummy_struct<T>) {
  return false;
}

export template <T>
void!string parse_bracket(input_stream mutable* stream, bracket_to_parse b) {
  if (round_brackets(pretty_dummy_struct<T>()))
    switch (b) {
      case (OPEN) { return stream^.expect("("); }
      case (CLOSE) { return stream^.expect(")"); }
      case (COMMA) { return stream^.expect(","); }
    }
}

export template <T> requires is_struct<T>
T!string read_named_fields(pretty_dummy_struct<T>, input_stream mutable* stream) {
  try parse_bracket<T>(stream, bracket_to_parse::OPEN);
  static mutable stmt = "";
  static for (i = 0; i < struct_count(T); ++i) {
    static const memberType = to_string(get_member_type(T, i));
    stmt = stmt + "mutable " + memberType + " ? elem" + to_string(i) + " = null;";
  }
  stmt = stmt +
    "mutable argNum = 0;" +
    "while (true) \{" +
    "if (round_brackets(pretty_dummy_struct<T>()) && !!stream^.expect(\")\") || argNum >= " + to_string(struct_count(T)) + ")" +
      "break;" +
    "const beginArg = stream^.index;" +
    "mutable string? id = stream^.read_string();" +
    "if (!stream^.expect(\"=\")) \{" +
      "id = null;" +
      "stream^.index = beginArg;\}";
  static for (i = 0; i < struct_count(T); ++i)
    stmt = stmt + "if (id == \"" + get_member_name(T, i) + "\" || (!id && argNum == " + to_string(i) + "))" +
        "elem" + to_string(i) + " = try stream^.read_data<" +
          to_string(get_member_type(T, i)) + ">();";
  stmt = stmt + "discard parse_bracket<T>(stream, bracket_to_parse::COMMA);" +
    "++argNum;\}";
  static for (i = 0; i < struct_count(T); ++i)
    static if (!member_has_default_value(T, i))
      stmt = stmt + "if (!elem" + to_string(i) + ")"  +
          "return stream^.get_error(\"Field " + get_member_name(T, i) + " is required\");";
  stmt = stmt + "mutable ret = " + to_string(T) + "::" + to_string(T) + "(";
  static mutable addComma = false;
  static for (i = 0; i < struct_count(T); ++i)
    static if (!member_has_default_value(T, i)) {
      static if (!!addComma) {
        stmt = stmt + ", ";
      }
      stmt = stmt + "." + get_member_name(T, i) + " = *move(elem" + to_string(i) + ")";
      addComma = true;
    }
  stmt = stmt + ");";
  static for (i = 0; i < struct_count(T); ++i)
    static if (member_has_default_value(T, i))
      stmt = stmt + "if (!!elem" + to_string(i) + ")"
          + "ret." + get_member_name(T, i) + " = *move(elem" + to_string(i) + ");";
  stmt = stmt + "return move(ret);";
  mixin "\{" + stmt + "\}";
}

export template <T> requires is_struct<T>
T!string read_data(input_stream mutable* stream, pretty_dummy_struct<T>) {
  return read_named_fields(pretty_dummy_struct<T>(), stream);
}

export template <T> requires is_union<T>
T!string read_data(input_stream mutable* stream, pretty_dummy_struct<T>) {
  static mutable readStmt = "";
  static mutable returnStmt = "return " + to_string(T) + "::";
  const discriminant = stream^.read_string();
  static for (i = 0; i < union_count(T); ++i) {
    static const altName = get_alternative_name(T, i);
    unchecked if (altName == discriminant) {
      const value = try stream^.read_data<$get_alternative_type(T, i)>();
      mixin "return " + to_string(T) + "::" + altName + "(move(value));";
    }
  }
  return stream^.get_error("Expected an {to_string(T)} type discriminant, got: \"{discriminant}\"");
}

export template <T> requires is_enum<T>
T!string read_data(input_stream mutable* stream, pretty_dummy_struct<T>) {
  const s = stream^.read_string();
  for (e : enum_range<T>()) {
    if (e^.asString() == s)
      return *e;
  }
  return stream^.get_error("Unrecognized {to_string(T)} element: \"{s}\"");
}

char get_char(input_stream mutable* stream) {
  return *stream^.index;
}

export string peek_string(input_stream mutable* stream) {
  while (stream^.index != stream^.buffer_end && stream^.get_char().isspace())
    discard ++stream^.index;
  if (stream^.index == stream^.buffer_end)
    return "EOF";
  char next = stream^.get_char();
  if (next == '"')
    return "{next}";
  mutable end = stream^.index;
  while (end != stream^.buffer_end && !end^.isspace())
    discard ++end;
  return stream^.index.substring(end);
}

export string read_string(input_stream mutable* stream) {
  const ret = stream^.peek_string();
  for (i : range(0, ret.size()))
    discard ++stream^.index;
  return move(ret);
}

export string get_error(input_stream* stream, string error) {
  const pos = &stream^.positions[stream^.index.index][0];
  return "Line {pos^.line}, column {pos^.column}: {error}";
}

export void!string expect(input_stream mutable* stream, string s) {
  const prevIndex = stream^.index;
  const read = stream^.read_string();
  if (read != s) {
    stream^.index = prevIndex;
    return stream^.get_error("Expected token: \"{s}\", got: \"{read}\"");
  }
}

export bool!string read_data(input_stream mutable* stream, pretty_dummy_struct<bool>) {
  const s = stream^.read_string();
  if (s == "false")
    return false;
  if (s == "true")
    return true;
  return stream^.get_error("Not a bool value: \"{s}\"");
}

export int!string read_data(input_stream mutable* stream, pretty_dummy_struct<int>) {
  const s = stream^.read_string();
  if (const i = s.to_int())
    return *i;
  return stream^.get_error("Not an int value: \"{s}\"");
}

export double!string read_data(input_stream mutable* stream, pretty_dummy_struct<double>) {
  const s = stream^.read_string();
  if (const i = s.to_double())
    return *i;
  return stream^.get_error("Not a double value: \"{s}\"");
}

export range!string read_data(input_stream mutable* stream, pretty_dummy_struct<range>) {
  if (stream^.expect("\{")) {
    // calling read_data<int> triggers a bug in the compiler
    const begin = try stream^.read_data(pretty_dummy_struct<int>());
    const ret = range(begin, try stream^.read_data(pretty_dummy_struct<int>()));
    try stream^.expect("\}");
    return move(ret);
  }
  const i = try stream^.read_data(pretty_dummy_struct<int>());
  return range(i, i + 1);
}

/* Doesn't work due to preprocessor
export char!string read_data(input_stream mutable* stream, pretty_dummy_struct<char>) {
  while (stream^.get_char().isspace())
    ++stream^.index;
  try stream^.expect("'");
  const c = stream^.get_char();
  try stream^.expect("'");
  return c;
}*/

export string!string read_data(input_stream mutable* stream, pretty_dummy_struct<string>) {
  mutable ret = "";
  if (const res = stream^.expect("\""); !res)
    return expected<string, string>::error(res.get_error());
  while (true) {
    const c = stream^.get_char();
    if (c == '"') {
      discard ++stream^.index;
      break;
    }
    ret += "{c}";
    discard ++stream^.index;
  }
  return expected<string, string>::value(move(ret));
}

export template <T> requires read_data_overload<T>
T?!string read_data(input_stream mutable* stream, pretty_dummy_struct<T?>) {
  if (stream^.expect("null"))
    return expected<T?, string>::value(null);
  return expected<T?, string>::value(try stream^.read_data<T>());
}

export template <T> requires read_data_overload<T>
vector<T>!string read_data(input_stream mutable* stream, pretty_dummy_struct<vector<T>>) {
  try stream^.expect("\{");
  mutable ret = vector<T>();
  while (true) {
    if (stream^.expect("\}"))
      break;
    ret.push_back(try stream^.read_data<T>());
  }
  return move(ret);
}

export template <T> requires read_data_overload<T>, is_enum<T>
enum_set<T>!string read_data(input_stream mutable* stream, pretty_dummy_struct<enum_set<T>>) {
  try stream^.expect("\{");
  mutable ret = enum_set<T>();
  while (true) {
    if (stream^.expect("\}"))
      break;
    ret.set(try stream^.read_data<T>());
  }
  return move(ret);
}

export template <T, U> requires read_data_overload<T>, is_enum<T>, copy<U>
enum_map<T, U>!string read_data(input_stream mutable* stream, pretty_dummy_struct<enum_map<T, U>>) {
  const m = try stream^.read_data<hash_map<T, U>>();
  return enum_map_generate([&](T key) { return m.get(&key)^.copy(); });
}

export template <T> requires read_data_overload<T>
box<T>!string read_data(input_stream mutable* stream, pretty_dummy_struct<box<T>>) {
  return box(try stream^.read_data<T>());
}

export template <T, U> requires read_data_overload<T>, read_data_overload<U>
pair<T, U>!string read_data(input_stream mutable* stream, pretty_dummy_struct<pair<T, U>>) {
  const e1 = try stream^.read_data<T>();
  return pair(move(e1), try stream^.read_data<U>());
}

export template <T, U> requires read_data_overload<T>, read_data_overload<U>, hash_key<T>
hash_map<T, U>!string read_data(input_stream mutable* stream, pretty_dummy_struct<hash_map<T, U>>) {
  try stream^.expect("\{");
  mutable ret = hash_map<T, U>();
  while (true) {
    if (stream^.expect("\}"))
      break;
    const key = try stream^.read_data<T>();
    ret.insert(move(key), try stream^.read_data<U>());
  }
  return move(ret);
}

export template <T> requires read_data_overload<T>
T!string read_data(input_stream mutable* stream) {
  return read_data(stream, pretty_dummy_struct<T>());
}
